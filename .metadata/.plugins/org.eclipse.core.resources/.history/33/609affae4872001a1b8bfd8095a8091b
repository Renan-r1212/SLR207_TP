package master.slave;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.io.PrintWriter;
import java.util.concurrent.LinkedBlockingQueue;

public class slaveError implements Runnable {
	private ProcessBuilder pb;
	private LinkedBlockingQueue<String> timeOutList;
	private volatile boolean running;
	private StringWriter sw;
	private PrintWriter pw;
	private String errorOut;
	
	public slaveError(LinkedBlockingQueue<String> _timeOutList) {
		timeOutList = _timeOutList;
		running = true; 
		sw = new StringWriter();
		pw = new PrintWriter(sw);
	}
	
	public void terminate() {
		running = false;
	}
	
	@Override
	public void run(){
		try {
			 pb = new ProcessBuilder("java", "-jar", "/tmp/rrodrigues/slave.jar");
			 
			 Process process = pb.start();
			 BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		         
			 String line;
		     while ((line = reader.readLine()) != null && running);
		} catch (IOException e) {
		    e.printStackTrace(pw);
		    errorOut = sw.toString();
		} catch (Exception e) {
		    e.printStackTrace(pw);
		    errorOut = sw.toString();
		}
		finally {
			try {
				timeOutList.put(errorOut);
			} catch (InterruptedException e) {
				 e.printStackTrace(pw);
				 timeOutList.add(sw.toString());
			}
		}
	}
}